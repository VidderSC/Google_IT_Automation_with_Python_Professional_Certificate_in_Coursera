Unit Testing

Unit tests are used to verify that small isolated parts
of a program are correct. 
Unit tests are generally written alongside* the code to
test the behavior of individual pieces or units like 
functions or methods.

An important characteristic of a unit test is isolation.
Unit test should only test the unit of code they target,
the function or method that's being tested.

This ensures that any success or failure of the test is
caused by the behavior of the unit in question and doesn't
result from some external factor like the network being
down or a database server being unresponsive.

Our tests should never modify the production environment.
This is a live environment that runs a software that users
interact with.
When developing test, if for any reason we do need to interact
with some other software, we'll normally do that in a test
environment, where we'll have control over how it behaves.

* What this means in practice is that we will create a separated
Python file with the test, and the convention is that will have
the same name of the module + "_test.py".
For example: "rearrange_test.py" would test the module "rearrange.py"

Understand basic assertions:

Method                      |  Checks that          |  New in
assertEqual(a, b)           |  a == b               |
assertNotEqual(a, b)        |  a != b               |
assertTrue(x)               |  bool(x) is True      |
assertFalse(x)              |  bool(x) is False     |
assertIs(a, b)              |  a is b               |  3.1
assertIsNot(a, b)           |  a is not b           |  3.1
assertIsNone(x)             |  x is None            |  3.1
assertIsNotNone(x)          |  x is not None        |  3.1
assertIn(a, b)              |  a in b               |  3.1
assertNotIn(a, b)           |  a not in b           |  3.1
assertIsInstance(a, b)      |  isinstance(a, b)     |  3.2
assertNotIsInstance(a, b)   |  not isinstance(a, b) |  3.2
