"Steps for coding projects"

1. Understand the problem statement:
    The first step to handle any coding project is to 
    fully understand the problem statement. 
    This includes; spelling out what needs to be done and 
    identifying what the given inputs and desired outputs are 
    for the program that we need to write.

2. Research:
    Figuring out how we can tackle the problem by the tools
    provided by the Python standard library or by external modules.
    Remember, we want to avoid reinventing the wheel. 
    No matter how tricky and intricate the challenge appears, chances 
    are that others have solved something similar before. 
    It's valuable that we spent some time looking into what resources 
    exist to help us solve our problem. This research phase also includes 
    looking at the documentation of the modules, classes, and functions 
    that we'll need to use, and understanding how they should be applied. 
    A lot of the documentation also includes examples. 
    So it's helpful to absorb those and see how they relate to the code 
    that we need to write.

3. Planning
    Once we know what we need to write and what tools we can use to 
    make it work, we should do some planning. 
    This means thinking about what data types are useful for our solution, 
    the order of operations that we need to perform, and how all the 
    pieces have come together to form our solution. 
    Synergy. If the problem is complex, it might help to write down the 
    plan for quick reference, either on a piece of paper or 
    in a digital document. Writing down the plan helps us focus on how 
    we're going to do things and identify any problems our plan might have. 
    At many companies, it's a common practice to write a design document 
    at this stage, detailing the problem statement, the tools that will be 
    used to solve it, and the plan of attack towards a solution. 
    Having others comment on your design helps make sure that all the 
    twists have been untangled.

4. Writing
    Once we have a clear plan, we do the actual writing of the script. 
    This step includes not only writing the code, but also checking that 
    the code does what it's supposed to do. 
    We do that by both manually testing the code and adding some 
    automatic test. 
    Sometimes it's tempting to just jump right into the coding stage, 
    about spending any necessary time to fully understand the problem, 
    research tools, or plan the solution. 
    But our experience shows us spending a while getting familiar with 
    what we're trying to do and what tools we have available to do it 
    can make a big difference. 
    Both in how long it takes to do the actual implementation and 
    ultimately how well our solution behaves.

