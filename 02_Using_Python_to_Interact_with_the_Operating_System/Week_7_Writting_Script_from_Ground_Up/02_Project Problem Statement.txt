Project Scenario

Your company runs a service called "Ticky".
This service is an internal ticketing system used by a lot of
different teams to manage their work.
The service logs a bunch of events to syslog, both when it runs
successfully and when it encounters errors.

Example logs:
May 27  11:45:04 ubuntu.local ticky: INFO: Created ticket [#1234] (username)
Jun  1  11:06:48 ubuntu.local ticky: ERROR: Connection to DB failed (username)

Developers of the service are asking for your help with getting
some information out of the logs.

For the final project in this module, you will write some automation scripts
than will process the system log and generate a bunch of reports based on the
information extracted from the log files.

The developers of the service want two different reports out of this data. 
- The first one is:
    A ranking of errors generated by the system. 
    This means a list of all error messages logged, and how many times each of 
    them was found, not taking into account the users involved. 
    They should be sorted by the most common error to the least common error. 

- The second one is: 
    A usage statistics for the service.
    This means, a list of all users that have used the system including how
    many info messages and how many error messages they've generated.
    This report should be sorted by username.

To visualize the data in these reports, you will generate a couple of webpages
that will be served by a webserver running in the machine. To do this, you will
use a script that is already in the system called:
"csv_to_html.py"

The goal is to have one script that can get all the necessary work done 
automatically, every day without any user interaction.
This script doesn't need to do all the work itself. It can call other scripts to
do individual tasks and then put the results together.

------------

- We will use regex to extract the data from the log.

- After extracting the information, we will count how many errors are of the same
    type, and how many "INFO" and "ERROR" messages there are for a given user.

- The best data structure for storing these would be the Dictionary. We will use
    two dictionaries:
    - One to account for ERROR messages
    - Another to count per user usage.

- Then we need to sort the data in the dictionary by different criteria.

The output of our Python script should be a couple of CSV files. Each of them
containing the names of the columns and the data in the order that it needs to
be presented.

Once those files are generated we will call the "csv_to_html.py" script to
create the HTML files based on the CSV data, passing two parameters to it:
    - The name of the CSV file to read.
    - The name of the HTML file to generate.

This last step could be done with either a Python or a Bash script, but 
we recommend using Bash, as it will only be calling commands and moving files.
