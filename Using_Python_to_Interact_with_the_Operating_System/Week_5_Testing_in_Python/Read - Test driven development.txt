Test Driven Development or TDD

You might expect that most testing happens after the code has been written.
This seems like a natural progression.
First you write your script then you write tests that verify that the script
does what you want it to do. But this isn't always the best approach.

A process called test-driven development or TDD calls for creating the test
before writing the code.
This might seem a bit counter-intuitive, but it can make for more thoughtful
well-written programs.

When presented with a new problem that can be solved by automation, your gut 
instinct might be to fire up your code editor and start writing.
But creating some tests first make sure that you've thought about the problem
that you're trying to solve and some different approaches that you might use
to accomplish it.

Writing a test first also helps you think about the ways your program could fail
and break, which can lead to some valuable insights and even change the approach
you take for the better.

The test-driven development cycle typically involves first writing a test, then
running it to make sure it fails. After all, you haven't written the code yet.
Once you've verified it fails, you write the code that will satisfy the test
then run the tests again.
If it passes you can continue on to the next part of your program.
If it fails you Debug and run the test again.
The cycle is repeated for each new feature of your script until it's up and running.

So before you write your next Python program, you might want to think about the tests
you can create to make sure it's working as you expect.
