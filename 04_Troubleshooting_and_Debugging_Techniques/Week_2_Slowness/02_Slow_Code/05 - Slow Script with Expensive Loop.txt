Remember that meeting reminder script that was having trouble with the dates?
The developers has kept working on it and now sends personalized emails with 
the name of the person getting email and the greeting. 

Unfortunately it seems to have made the application pretty slow. 

The developers are asking for our help in figuring out how we can make the 
program faster. So let's get to work. 

First, we'll need to reproduce the problem and figure out what slow means in 
this case. 
One user told us that the problem is visible when the list of recipients is 
long. 
To avoid spamming our colleagues while we're testing this issue, we'll send 
reminders to a bunch of test users that we've created in our mail server.

Remember that the application has two parts:
· A shell script that pops up a window where we can enter the data of the 
  reminder.
· A Python script that prepares the email and sends it. 

The part that's slow is the sending of the emails. So we won't interact with 
the pop-up at all. 
We'll just pass the parameters we need to the Python script. 
We'll measure the script speed using the "time" command. 

Let's first call it with just one test user and see how long it takes:

"""
$ time ./send_reminders.py "2023-10-19|Example|test1"
Successfully sent reminders to: test1

real    0m0.129s
user    0m0.068s
sys     0m0.013s
"""

When we call time, it runs the command that we pass to it and prints how long 
it took to execute it. 
There's three different values:
· real: 
  The amount of actual time that it took to execute the command. 
  This value is sometimes called wall-clock time because it's how much time a 
  clock hanging on the wall would measure no matter what the computer's doing.
· user: 
  The time spent doing operations in the user space.
· sys: 
  The time spent doing system level operations.

The values of "user" and "sys" won't necessarily add up to the value of "real" because the computer might be busy with other processes. 

- What do we see here? 
It took our script 0.129 seconds to send the email. 
That's not a lot but we only send the message to one user. 

Let's try this again with our 9 tests users. 

"""
$ time ./send_reminders.py "2023-10-19|Example|test1,test2,test3,test4,test5,test6,test7,test8,test9"
Successfully sent reminders to: test1,test2,test3,test4,test5,test6,test7,test8,test9

real    0m0.296s
user    0m0.222s
sys     0m0.008s
"""

We see that it took 0.296 seconds to send the email this time. 
That's still not a lot but it does look like it's taking longer with a longer 
list of emails. 
It's time to try to make this better. 

- How can we find out what's wrong with the code? 
We could always look at the code and see if we find any expensive operations 
that we can improve. 
But in this case we want to use a profiler to get some data about what's going 
on. So let's try that. 

There's a bunch of different profilers available for Python that work for 
different use cases. Here, we'll use the one called "pprofile3". 

We use the "-f" flag to tell it to use the "callgrind" file format and the 
"-o" flag to tell it to store the output in the "profile.out" file.

"""
$ pprofile3 -f callgrind -o profile.out ./send_reminders.py "2023-10-19|Example|test1,test2,test3,test4,test5,test6,test7,test8,test9"
Successfully sent reminders to: test1,test2,test3,test4,test5,test6,test7,test8,test9
"""

This generated a file that we can open with any tool that supports the 
"callgrind" format. 
We're going to use "kcachegrind" to look at the contents, which is 
a graphical interface for looking into these files.

"""
$ kcachegrind profile.out
"""

There's a lot going on with this program. So don't get scared if it takes a 
while to make sense out of it. 
As with so many other things practicing and tinkering on your own will help you 
get used to what all the different things here mean.

Let's look at the information we need now. 

In the lower right half we see a call graph, which tells us that the main 
function is calling the send message function one time. 
This function is calling 9 times each the following functions:
· The message template function, 
· The get name function,
· The send message function

The graph also tells us how many microseconds are spent on each of these calls. 
We can see that most of the time is being spent in the get name function. 

That's probably the one we should optimize.
Let's see what this function is doing using atom.

"""
$ atom send_reminders.py
"""

We see that the "get_name" function opens a CSV file then goes through the 
whole file checking if the first field in the line matches the e-mail name and 
when that's the case it sets the value of the name variable. 
There's a couple of things that are wrong with this function. 

First, once it finds the element in the list it should immediately break out of 
the loop. Right now, it's iterating through the whole file even if the email 
was found in the first line. 
But even if we fixed that it would still open the file and read through it for 
each e-mail address. This can get really slow if the file has a lot of lines. 

- So how can we make this better? 
We can read the file once and store the values that we care about in a 
dictionary and then use that dictionary for the lookups. 

We'll change the "get_name" function and turn it into a "read_names" function 
that will process the CSV file and store the values we want in the names 
dictionary. 
For each line will store the email as the key and the names as the values. 
Instead of returning one name we'll return the whole dictionary.

Now we have a "read_names" function that stores the data we want in a 
dictionary. 
We now need to change the way this is called in the "send_message" function.
We see that the "get_name" function is being called once per email. 
To apply our change we should call the "read_names" function before the "for 
loop" so that we do it only once. 
Then instead of calling "get_name" we'll just get the values from the 
dictionary.

We've made the change. Let's save our file and profile our script again to see 
if we manage to make it any faster.

"""
$ pprofile3 -f callgrind -o profile.out ./send_reminders.py "2023-10-19|Example|test1,test2,test3,test4,test5,test6,test7,test8,test9"
Successfully sent reminders to: test1,test2,test3,test4,test5,test6,test7,test8,test9
$ kcachegrind profile.out
"""

The graph looks different now as we've changed how the code behaves. 
The "read_names" function is now taking a much smaller portion of time. 

On the flip side we see that the message template is the one that's taking the 
most time now. So if we wanted to keep making our script faster that's what we 
look next. 

Lets recap:
We saw that we can use the time command to check how long it takes to execute a 
program. We then saw how we can combine a profiler and a profile visualizer to 
figure out where our code is spending most of his time. 
Finally, we changed our code to avoid doing inexpensive loop over and over by 
storing the information in a dictionary and then accessing the dictionary 
instead.