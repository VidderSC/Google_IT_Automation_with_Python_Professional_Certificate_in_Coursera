- Preventing Future Problems:

Throughout our course, we've called out several times that, whenever we're faced with an issue, it's usually best to find a quick workaround, so that those affected can get back to work as soon as possible. 

Say your database server crashed because it ran out of space. You can solve it quickly by adding an extra hard drive and starting the service back up. 
But remember, our work doesn't finish there. 
Once the affected users are happily doing their job, we need to look for a long-term solution that will prevent the problem from happening again in the future. 

In the database server scenario, that would be detecting that the disk is running out of space before it happens. 

- How do we do that without a crystal ball? 
One key strategy is to make good use of monitoring. 

There's a lot to say about monitoring, so much that we could have a whole course on this subject. The short version of it is, that you want the computers you care about to send their data to a centralized location that aggregates all this information. 
And then you want to be able to look at both the information yourself, and trigger alerts when the values are not within acceptable range. 

When you first set up a monitoring system, you might not be sure what information to prioritize, so start with the basics: 
- CPU, 
- Disk, 
- Memory,
- Network usage. 

As time passes and you have to deal with more incidents, you'll probably discover other metrics that you'd like to include in your monitoring system. 

- Example: 
  If you have to debug a problem related to a computer overheating, you'll want to include the temperature sensor's data in your monitoring system. 

  You'll also want to include information related to the specific service running on the computer. 
  
  If it's a web server, you'll want to know the ratio between successful web responses and errors. 
  
  If it's a database server, you'll want to know how many queries that are being served over time. 
  
  And whenever you have to deal with an incident that wasn't caught by the monitoring system, remember to set up new monitoring and alerting rules that will notify you about the problem if it ever happens again. 
  
An important capability of monitoring is to include the measurements taken along a period of time. That way, we can keep track of how we're using our resources, and catch changes in tendencies early on to help us with planning.

Having good monitoring will let us know early on if things are broken but,

- How do we make sure that the things we fix stay fixed? 
We've mentioned this already, but it's worth repeating. If you have to work around an issue in an application developed by someone else, it's important that you report a bug to the relevant developers. 

That way, those in charge of the code can take your case into account and make it work correctly in the future. 

If you don't do this, it's possible that the workaround you figured out for the current version is not sufficient for the next version, and you'll have to figure out a whole new workaround. 

When reporting a bug to someone else, remember all the best practices that we talked about earlier. 
Let them know: 
- What you were trying to achieve, 
- What you did, 
- What the expected result was, 
- What the actual result was. 
- Include your reproduction case and workarounds for the issue. 
- If you have access to the source code of the project, providing a patch that 
  fixes the issue increases the chance of that code getting fixed. 

On the flip side, if you have to work around an issue in the software that you own, make sure that you write a test that catches the problem.

That way, you can be sure that you won't ever make a change to the code that will trigger that same issue again. And even if you're not in charge of the development of the software, you can still run automatic tests whenever there's a new version, just to check if it still works as expected. So make sure you perform these tests whenever a new version of the application comes around.

Finally, regardless of whether the bug came from software that you wrote or someone else wrote, make sure that you document the key pieces of:
- What you did, 
- How you diagnosed the issue, 
- How you squashed it. 

That way, if the issue happens again, you or whoever else needs to deal with it will be able to quickly apply the solution, instead of spending valuable time investigating.