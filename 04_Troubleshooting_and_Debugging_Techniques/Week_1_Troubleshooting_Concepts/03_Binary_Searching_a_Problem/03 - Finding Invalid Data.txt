- Real life Example:

We have a Python program that reads data from a CSV file, processes it, and 
then imports it into a database. 
One of the users of the system tells us that the file they're trying to import 
fails with an obscure import error. They've sent us the file so we can try it 
ourselves. 

To call the command, we'll connect the output of "cat contacts.csv", the file 
that the user sent us, to the "import.py" command. 

"""
$ cat contacts.csv | ./import.py
"""

But before we run the command, it's a good time to remember that we 
shouldn't test in production. 
And since this script is going to be trying to import data into a database, we 
should run it against the test database instead of the production database.

To do that, we'll use the "--server" flag that takes the name of the database 
server, and then we'll pass the "test" as the parameter.

"""
$ cat contacts.csv | ./import.py --server test
Import error
"""

We see that the file fails with an importing error, and doesn't give us a lot of
information about what's failing. 

How big is that file? 
We could open it with an editor and check, but we don't need to. 
We can use the "wc" command that counts characters, words, and lines in a file. 

In particular, "wc -l" will print the amount of lines in a file.

"""
$ wc -l contacts.csv
100
"""

So our file has 100 lines in it, that's a lot. We don't want to have to go 
looking through that list to find out what could be wrong, especially since we 
have no idea what that might be. 
Instead, we can try passing only half of the file to the script and check if it 
succeeds or fails. 
If it fails, then we pick up that part of the file and check 
again with half of it.
If our import succeeds, then we take the other half and split it in two. 

We could edit the file manually to add or remove the parts as needed, but that 
would be tedious. 
Instead, we can use the tools available to us to help us do that with less 
effort. 

We can use the "head" command to print the first lines in the file, and the 
"tail" command to print the last lines. We can pass the amount of lines we want 
to include as a parameter. 

So "head -15 contacts.csv" will print the first 15 lines, 
while "tail -20 contacts.csv" will print the last 20 lines. 

Our command reads the file to import from standard input. So we can use pipes 
to connect the output of our head or tail commands to it. 
Let's try to input the first half of the file now.

"""
$ head -50 contacts.csv | ./import.py --server test
Import error
"""

Okay, so the first half failed, let's split it again. 

To do that, we'll use another pipe to take only half of the previous number. 
This way, in each step, we'll add a call to head or tail for the corresponding 
size.

"""
$ head -50 contacts.csv | head -25 | ./import.py --server test
Import successful
"""

This time, it succeeded. This means that the failure must be in the second 
quarter of the file. Let's verify that that's the case by giving that part to 
our command. 
To do that, we'll take the first half using head, then get the second half of 
it using tail.

"""
$ head -50 contacts.csv | tail -25 | ./import.py --server test
Import error
"""

This fails again, but that's good, it means we're on the right track. 
Let's split it once again.

"""
$ head -50 contacts.csv | tail -25 | head -13 | ./import.py --server test
Import successful
"""

Great, our test set is getting smaller, let's split it once more.

"""
$ head -50 contacts.csv | tail -25 | tail -12 | head -6 | ./import.py --server test
Import error
"""

Okay, we're down to six entries, and we know that one of them is the bad one. 

Let's spin it one more time, and then we can look at the three remaining 
entries.

"""
$ head -50 contacts.csv | tail -25 | tail -12 | head -6 | head -3 | ./import.py --server test
Import error
"""

All right, let's look at the three entries left and see if we can find the 
culprit.

"""
$ head -50 contacts.csv | tail -25 | tail -12 | head -6 | head -3
Mechelle S. Fischer,"P.O. Box 548, 5515 In Avenue",Bulgaria,(766) 353-8154,836079-3486
Harding V. Berry,Ap #818-800 Elit. Avenue,Liberia,(182) 889-8702,735723-1674
Rhona K, England,Ap #193-1392 Sit Road,"Virgin Islands, United States",(151) 405-5437,439017-6784
"""

Can you see the problem? 
This is a comma separated file. This means that each comma is used as a 
separator between the fields in the file. 
If a field includes commas, it should be written between quotes. 
But in the case of the third line we're looking at here, we can see that 
there's a comma instead of a period after the middle initial and this is not 
written between quotes. 

The importing script is then confused because there are too many fields in this 
line. 

Let's edit the file and fix it.

"""
Rhona K. England,Ap #193-1392 Sit Road,"Virgin Islands, United States",(151) 405-5437,439017-6784
"""

And now let's run our importer again with the fixed file.

"""
$ cat contacts.csv | ./import.py --server test
Import successful
"""

We fixed the problem in the file! 
Using the bisect method, we very quickly found which line out of 100 lines 
contained the corrupt data. 
And then we could fix it and successfully import it. 

- The short-term remediation here is to tell our user about what we found and 
how to fix it, so that they can import the data into the production database.

- The long-term remediation is to figure out why the file was generated with 
the invalid field in the first place and make sure that it doesn't happen again.