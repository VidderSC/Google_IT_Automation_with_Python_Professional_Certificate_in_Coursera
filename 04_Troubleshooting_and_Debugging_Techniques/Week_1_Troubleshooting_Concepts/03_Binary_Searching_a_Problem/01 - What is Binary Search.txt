- Binary Search:

Usually when trying to find the root cause of a problem, we'll be looking for 
one answer in a list of many. Searching for an element in a list is a common 
problem in computing. 

For example, we have a list that contains the data of employees that work at 
our company and want to find one specific employee. 

- One possible approach would be to start from the first entry 
and then check if the name is the one that we're looking for.
If it doesn't match, move to the second element and check again, and keep going 
until we find the employee with the name we're looking for, or we get to the 
end of the list. 

This is called a linear search.
This type of search works but the longer the list, the longer it can take. In 
other words, the time it takes to find the result is proportional to the length 
of the list. 

- If the list is sorted, we can use an alternative algorithm for searching 
called binary search. Because the list is sorted, we can make decisions about 
the position of the elements in the list.

So the first thing we do is compare the name that we're looking for with the 
element in the middle of the list and check if it's equal, smaller, or bigger.
If it's smaller, we know that the element we're looking for must be in the 
first half of the list. On the flip side, if it's bigger, we know that it's in 
the second half of the list. 
This way, with only one comparison, we've eliminated half of the list from 
possible candidates where the element could have been found, and then we do the 
same thing again and again until we find the element.

So if the element we were looking for was smaller than the middle element, we 
look at the element in the middle of the first half. If our element is now 
bigger, we look at the element in the middle of the second quarter, and so on. 

Each time we look at the middle element of the section we're dealing with, 
until we find the element we're looking for. 


Using linear search, going through a list with 1000 elements might take up to 
1000 comparisons if the element we're looking for is the last one in the list 
or isn't present at all.
Using binary search for the same list of 1,000 elements, the worst-case is only 
10 comparisons.

This is calculated as the base two logarithm of the lists length, and the 
benefits get more and more significant the longer the list.
For a list of 100,000 elements, it would be 17 comparisons instead of 100,000 
comparisons. 

* Remember, for this to work, the list needs to be sorted. 

If the list isn't sorted, we would need a sort it first, which takes a chunk 
of time. It can still make sense to do it if we're going to search through it 
several times. 
But it doesn't make sense to sort the list and then use binary search to only 
find one element.

In that case, using linear search is simpler and faster.