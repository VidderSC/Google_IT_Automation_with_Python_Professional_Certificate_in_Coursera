- Another example:

Say a user contacts us to let us know that a certain application fails to open.

The first thing to do is to get more information about the conditions that 
caused the failure. What the error is that the user is getting and then check 
if we experience the same failure.

By asking for these details, we discover that a new version of the software was 
recently released. And when we upgrade to this new version, we can reproduce 
the problem on our own computer.

    $ ./example.py

We see that when we try to run the program it prints no error at all. It just 
exits immediately. We need to figure out what's going on. Even if there's no 
error message.

There are a bunch of tools that can help us better understand what's going on 
with the system and with our applications. With the help of these tools, we can 
extend our knowledge of a particular problem view the actions of the program 
from a different point of view and get the info we need. 

Among these tools "strace" lets us look more deeply at what the program is 
doing. It will trace all "system calls" made by the program and tell us what 
the result of each of these calls was. So to figure out what's up with our program that's failing to open will "strace" the failing application.

    $ strace ./example.py

The "strace" command shows us all the "system calls" are program made. 
* System calls:
Calls that the programs running on our computer make to the running kernel.

There are loads of different system calls and depending on what we're trying to debug we might be interested in some more than others.

Theres a lot of information on this output so, let's make it more manageable:
We could pipe the output to the "less" command which we could use to scroll 
through a lot of texts or we could use the "-o" flag of the "strace" command to 
store the output into a file and then browse the contents of that file.
The "-o" flag, lets us refer back to the file later if we need to so, let's go 
with that one.

    $ strace -o failure.strace ./example.py

Now we can read the generated file using whichever program we prefer. Let's 
open it with "less". We will go to the end of the file pressing "Shift+G", then
scroll up to see if we find anything suspicious.

    $ less failure.strace

Close to the end of the log we can see that the application tries to open a 
directory called "/.config/purplebox", which doesn't exist.

Let's look at this line in a bit more detail:
"""
openat(AT_FDCWD, "/home/user/.config/purplebox", O_RDONLY|O_NONBLOCK|O_CLOEXEC|O_DIRECTORY) = -1 ENOENT (No such file or directory)
"""

- The name of the system call is "openat". 
  This is one of the calls used to open files or directories.

- The content of the call shows the parameters passed including the path that's 
  being opened and a bunch of flax. 
  In particular the "O_DIRECTORY" flag tells us that the program is trying to open this path as a directory.

- The number after the equal sign shows us the return code of the sys call.
  In this case it's -1, so the program is trying to open this directory and 
  it turns out it doesn't exist.


Since this is happening shortly before the program finishes, it's a likely 
candidate for the root cause of the issue. 

Let's create the directory and try to start the program again.

    $ mkdir ~/.config/purplebox
    $ ./example.py

Success! This time the program works just fine.


Let's recap what we did:

1.  We got some information from a user telling us there was a change in the 
    new version which was causing a problem. 

2.  To investigate this, we reproduced the problem on our own computer.

3.  Then we got more information on what was going on by using the "strace" 
    tool which lets us see the system calls made by a program. 

4.  We found a suspicious error. That said that a directory didn't exist.

5.  We created the directory to check out what would happen when it did exist 
    and the program work correctly. 

So we've identified the root cause of the problem which is the missing 
directory. Now, we can go ahead and remediate the issue.

- The immediate remediation: 
  Tell the user to create the directory so that they can get back to work 
  quickly.

- The long-term remediation: 
  Contact the developers of the software to let them know that the program 
  will fail to start if the director is missing. This gives them a heads up 
  about the problem so they can fix it in the next version. 

- What about the documentation? 
  We should note that this version of the software won't start if that 
  directory doesn't exist. It will help others facing the same issue to 
  quickly find out the solution.
