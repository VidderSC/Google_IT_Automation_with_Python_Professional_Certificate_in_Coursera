Intermittently Failing Script

A colleague recently developed a small application to send meeting reminders to 
people in the company, because someone kept forgetting to show up. 
The sales team was the first to test the app last week, and it worked fine. But 
this week, another user is trying to send a meeting reminder and the program 
keeps terminating with an error. 

Since the colleague that developed the app is on the other side of the 
Atlantic, the user is asking for our help to figure out what's going on. 

First, let's try running the program ourselves and check if we can reproduce 
the problem.

We're presented with a window where we can enter the "date" for the meeting, 
the "title" of the meeting, and the "names" of the people that we want to send 
the reminder to.

The meeting reminder that the user was trying to send was for "January 13th"
and the title was "Production Review". 
As we are trying things out and don't want to be mailing reminders out with our 
tests, I'll set this one to send the reminders to me.

It failed to send the email. This means we've reproduced the issue. 

Let's try send the reminder that the sales team sent last week which had worked 
fine.
In that case, the reminder had been sent for "January 7th" and the title was 
"Sales All Hands". 
Again, I'll send this to myself to avoid spanning people with test reminders.

In this case, the program successfully sent the reminder. 


* Which parameter do you think is at fault? The title or the date? 
It could be either. But I'll bet it's the date. 

Let's try it once more with "January 13th" as the date and "Sales All Hands" as 
the title.

Another failure. So we have a reproduction case. 

When we try to send the meeting reminder for "January 13th", we get the failure 
message. But if we try to send the same reminder for "January 7th", it works 
fine.

Now, the next step is to find the root cause of the issue. 


* Why could our application work fine for "January 7th" but fails for "January 
13th"? 
There could be a bunch of reasons. But in general, when dates are involved in a 
failure, the problem is due to how the dates are formatted. 

In some countries, the dates are written with the month first and the day 
second. While in other countries, it's the other way around. 
To figure out what's going on, let's add more debugging information to the 
program. 
We'll open the "meeting_reminder.sh" script, which is a script written in Bash.


We see that this script is calling a program called Zenity. 
Zenity is the application showing the window to select the date, title, and 
emails. 
The output generated by Zenity is stored in a variable called meeting_info, 
which is then passed as a parameter to the "send_reminders.py", Python script.
This script then sends the emails. 

To get more information about the output generated by Zenity, we'd like to see 
the value of the meeting_info variable before the Python script gets called. 
Let's add an echo statement to see that.

"""
echo $meeting_info
01/13/2020|Test|Amanda
"""

We see that the information generated by Zenity is split by pipes, and that the 
data is formatted as month, day, year. 

That's already valuable information. Now, the next step is getting a more 
informative error. 
To do that, let's open the Python script that sends the reminders, and see if 
we can make it print a better error.

The file is long, so it makes sense to start by looking at the main function 
that lists the core functionality of the program. 
We see that it splits the parameter receive in three, then prepares the message 
to be sent, and finally sends it. 
If everything works fine, it prints a message saying that it was sent 
successfully. 
But if anything fails, it prints the error message that we've seen already. 

That error message is not very useful, as it's hiding the reasons why things 
failed. Let's make this error more helpful by also printing the exception that 
generated the failure.

"""
print(f"Failure to send email with: {e}", file=sys.stderr)
Failure to send email with: time data '01/13/2020' does not match format '%d/%m/
%Y'
"""

This time we see that the problem is that the date format we are using is 
putting the month first, but the program is expecting to have the month second. 
As there's no month 13, this is an invalid date.

So we found the root cause of the problem. The program is trying to convert the 
date assuming one specific date format, but we're using a different format. 
As we now know, once we know the root cause, the next step is to remediate the 
issue. 


*What can we do in this case to remediate the problem? 
We could change the program to use our date format, but then the application 
would break for people running it in a different location. 

What we need to do is make sure that no matter where we run the script, the 
date generated by Zenity matches the date expected by Python. Fortunately, 
Zenity includes a parameter to specify any format we want.

So we'll change the shell script to use the "--forms-date-format" parameter and 
set the format to "%Y-%m-%d", which is the "international standard date format".

"""
--forms-date-format='%Y-%m-%d' \
"""
It now returns: "2020/01/13|Test|Amanda"

Now, we need to change the Python script to use the same format. We'll go to 
the function that has the format specified using a regex and change it to the 
same format.

"""
dateobj = datetime.datetime.strptime(date, r"%Y-%m-%d")

"""

Now, the date format generated by Zenity should always match the one read by 
Python. This script should work in our country and any others. 
Let's try it out and check if it's really fixed.

"""
Successfully sent reminders to: Amanda
"""

We've successfully fixed the issue! 


Let's quickly recap what we did. 
路 We reproduced the problem ourselves
路 Then found which input triggered the issue and which one didn't.
路 We then added more debugging information to the scripts
  which helped us find the root cause of the problem, a mismatch between the 
  date formats used by this Zenity invocation and the Python script.
路 Finally, we fixed the issue by making sure that both were using the same date 
  format.