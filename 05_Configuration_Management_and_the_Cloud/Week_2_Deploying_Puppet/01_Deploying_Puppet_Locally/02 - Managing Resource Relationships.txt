- Managing Resource Relationships:

In our last module, we wrote a very simple manifest which we then applied locally. 
That was a great way to practice applying Puppet rules, but it was super-simple. Let's challenge ourselves with something a bit more tricky. 

The Puppet manifests that we use to manage computers in our fleet usually include a bunch of different resources that are related to each other. 
You're not going to configure a package that's not installed and you don't want to start a service until both the package and the configuration are in place. 

Puppets lets us control this with "resource relationships". Let's check this out in an example.
We have a file called "ntp.pp", that has a bunch of resources related to the "ntp" configuration like the one we've seen in an earlier module.

"""
$ cat ntp.pp

class ntp {
  package { 'ntp':
    ensure => latest,
  }
  file { '/etc/ntp.conf':
    source  => '/home/user/ntp.conf',
    replace => true,
    require => Package['ntp'],
    notify  => Service['ntp'],
  }
  service { 'ntp':
    enable  => true,
    ensure  => running,
    require => File['/etc/ntp.conf'],
  }
}

include ntp
"""

This time, on top of declaring the resources that we need to manage, we're also declaring a few relationships between them. 
We see that the "configuration file" requires the "ntp package" and the "service" requires the "configuration file". 
This way, Puppet knows that before starting the service, the "configuration file" needs to be correctly set, and before sending the configuration file, the package needs to be installed. 

We're also declaring that the "ntp service" should be notified if the configuration file changes. That way, if we make additional changes to the contents of the configuration file in the future, the service will get reloaded with the new settings. 

If you look closely, you might notice that the resource types are written in lowercase, but relationships like "require" or "notify" use uppercase for the first letter of the resource. 
This is part of Puppet syntax. 

"""
We write resource types in lowercase when declaring them, but capitalize them when referring to them from another resource's attributes. 
"""

This sounds confusing right now, don't worry. It might take a while to wrap your head around it, but it will eventually click. 

Now, one last thing. At the bottom of the file, we have a call to include NTP. That's why we told Puppet that we want to apply the rules described in a class. 

For this example, we put the definition of the class and the call to include the class in the same file. 

Typically, the class is defined in one file and include it in another. 

We'll checkout examples for this in later modules. 

Let's apply these rules locally:

"""
$ sudo puppet apply -v ntp.pp

Notice: Compiled catalog for ubuntu in environment production in 0.02 seconds
Info: Applying configuration version '1575649527'
Notice: /Stage[main]/Ntp/Package[ntp]/ensure: created
Info: Computing checksum on file /etc/ntp.conf
Info: /Stage[main]/Ntp/File[/etc/ntp.conf]: Filebucketed /etc/ntp.conf to puppet with sum 1055d6aaf319d27890203e4c378c58b
Notice: /Stage[main]/Ntp/File[/etc/ntp.conf]/content: content changed '{md5}1055d6aaf319d27890203e4c378c58b' to '{md5}e70d0fa8ead9dfa08e41fc834fbb9bdc'
Info: /Stage[main]/Ntp/File[/etc/ntp.conf]: Scheduling refresh of Service[ntp]
Notice: /Stage[main]/Ntp/Service[ntp]: Triggered 'refresh' from 1 event
Notice: Applied catalog in 4.38 seconds
"""

Our rules have run and in the verbose output, we can see that it did a bunch of things:
· It installed the package, 
· It checked that the configuration file needed to be updated so it changed 
  its contents. 
· Finally, after changing the contents of the configuration, Puppet knew to 
  restart the NTP service. 

We see here how our Puppet rules have translated into a few different actions. 

Let's make a change to the configuration file by editing the "ntp.conf" file in this directory.

"""
vim ntp.conf

driftfile /var/lib/ntp/ntp.drift
leapfile /usr/share/zoneinfo/leap-seconds.list
statistics loopstats peerstats clockstats

filegen loopstats file loopstats type day enable
filegen peerstats file peerstats type day enable
filegen clockstats file clockstats type day enable

server 0.pool.ntp.org
server 1.pool.ntp.org
server 2.pool.ntp.org
server 3.pool.ntp.org

restrict -4 default kod notrap nomodify nopeer noquery limited
restrict -6 default kod notrap nomodify nopeer noquery limited

restrict 127.0.0.1
restrict ::1

restrict source notrap nomodify noquery
"""

This is the configuration values by the NTP service. It's currently using a bunch of servers from ntp.org. 
But instead of those servers, we want to try out the NTP servers provided by Google. These are called:
· time1.google.com
· time2.google.com
· time3.google.com
· time4.google.com

We've made the change, we'll save with ":WQ" and then rerun our Puppet rules with the new configuration file.

"""
$ sudo puppet apply -v ntp.pp

Notice: Compiled catalog for ubuntu in environment production in 0.02 seconds
Info: Applying configuration version '1575649573'
Notice: /Stage[main]/Ntp/Package[ntp]/ensure: created
Info: Computing checksum on file /etc/ntp.conf
Info: /Stage[main]/Ntp/File[/etc/ntp.conf]: Filebucketed /etc/ntp.conf to puppet with sum e70d0fa8ead9dfa08e41fc834fbb9bdc
Notice: /Stage[main]/Ntp/File[/etc/ntp.conf]/content: content changed '{md5}e70d0fa8ead9dfa08e41fc834fbb9bdc' to '{md5}cd07e294495656a144f01a30eb3d43a0'
Info: /Stage[main]/Ntp/File[/etc/ntp.conf]: Scheduling refresh of Service[ntp]
Notice: /Stage[main]/Ntp/Service[ntp]: Triggered 'refresh' from 1 event
Notice: Applied catalog in 0.25 seconds
"""

Puppet updated the configuration file with the new contents and then refresh the service, so it loaded the config. Success. 

In this module, we've seen how we can apply a Puppet manifests that includes a class with a bunch of resources. 
We grouped all of the information related to the NTP service in a manifest specific to it, which is common practice when dealing with Puppet rules. 
We want to keep related operations together and separate things that are unrelated.