- Getting Alerts When Things Go Wrong:

We expect a lot from our modern IT services:
· We expect them to be up and running 24-7. 
· We want to be able to get our work done whenever and wherever. 

For that, we need our services to respond day or night, workday or holiday. But even if the services are running 24-7, System Administrators can't constantly be in front of their systems. Instead, we set up our services so that they work unattended and deal with problems when they happen. 

To do this, we need to detect those problems so that we can deal with them as quickly as possible. If you have no automated way of raising an alert, you might only find out about the issue when you get a call from a frustrated user telling you that your service is down. 

That's not ideal. It's much better to create automation that checks the health of your system and notifies you when things don't behave as expected. This can give you advance warning that something's wrong, sometimes even before users notice a problem at all.

- How do we do that? 
The most basic approach is to run a job periodically that checks the health of the system and sends out an email if the system isn't healthy. 

On a Linux system, we could do this using "cron", which is the tool to schedule periodic jobs. We'd pair this with a simple Python script that checks the service and sends any necessary emails. 
This is an extremely simplified version of an alerting system, but it shares the same principles as all alerting systems, no matter how complex and advanced. 

We want to periodically check the state of the service and raise alerts if there's a problem. 

When you use a monitoring system like the ones we described in our last module, the metrics you collect represent the state of your service. Instead of periodically running a script that connects to the service and checks if it's responding, you can configure the system to periodically evaluate the metrics; and based on some conditions, decide if an alert should be raised. 

"""
Raising an alert signals that something is broken and a human needs to respond.
"""

For example, you can set up your system to raise alerts if:
· The application is using more than 10 gigabytes of RAM,
· If it's responding with too many 500 errors,
· If the queue of requests waiting to get processed gets too long. 

Of course, not all alerts are equally urgent. We typically divide useful alerts into two groups, those that need immediate attention and those that need attention in the near future. 

If an alert doesn't need attention, then it shouldn't have been sent at all. It's just noise. 
If your web service is responding with errors to 50 percent of the requests, you should look at what's going on right away. Even if this means waking up in the middle of the night to address whatever is wrong. You'll definitely want to fix this kind of critical problem ASAP. 

On the other hand, if the issue is that the attached storage is 80 percent full, you need to figure out whether to increase the disk size or maybe clean up some of the stored data but, this isn't super urgent, so don't let it get in the way of a good night's sleep. 

Since these two types of alerts are different, we typically configure our systems to raise alerts in two different ways:
· Pages:
  Those that need immediate attention. Sent to you inmediately via SMS, eMail, Call, App notification, etc.
· Bug: 
  Non-urgent alerts usually configured to create "tickets" for an IT specialist to take care of during their workday. 
  They can also be configured to send email to specific mailing lists or send a message to a chat channel that will be seen by the people maintaining the service. 
 
"""
All alerts should be actionable. 
"""

If you get a "bug" or a "page" and there's nothing for you to do, then the alert isn't actionable and it should be changed or it shouldn't be there at all. 

- Examples:
Say you're trying to check if your services database back-end is responsive. If you do this by creating a query that returns all rows in a large table, your request might sometimes timeout and raise an alert. 
That would be a noisy alert, not really actionable. 
You'd need to tweak the query to make the check useful. 

Say you run a cron job that copies files from one location to another every 10 minutes, you want to check that this job runs successfully. So you configure your system to alert you if the job fails. After putting this in production, you realize there's a bunch of unimportant reasons that can cause this job to temporarily fail. 
Maybe the destination storage is too busy and so sometimes the job times out. 
Maybe the origin was being rebooted right when the job started, so the job couldn't connect to it. 
No matter why, whenever you go to check out what caused a job to fail, you discover that the following run had succeeded and there's nothing for you to do. You need to rethink the problem and tweak your alert. 

Since the task is running frequently, you don't care if it fails once or twice, you can change the system to only raise the alert if the job fails three times in a row. 
That way when you get a bug, it means that it's failing consistently and you'll actually need to take action to fix it. 

All of this configuring and tweaking can seem like a lot of work. 
· You need to think about which metrics you care about,
· Configure your monitoring system to store them,
· Configure your alerting system to raise alerts when things don't behave as 
  expected. 

Once you've set your systems to raise actionable alerts when needed, you're going to have peace of mind. If no alerts are firing, you know the service is working fine. This lets you concentrate on other tasks without having to worry. 

To set up good alerts, we need to figure out:
· Which situations should page, 
· Which ones should create bugs,
· Which ones we just don't care about. 

These decisions aren't always easy and might need some discussion with the rest of your team. But it can help make sure that you spend time only on things that actually matter.