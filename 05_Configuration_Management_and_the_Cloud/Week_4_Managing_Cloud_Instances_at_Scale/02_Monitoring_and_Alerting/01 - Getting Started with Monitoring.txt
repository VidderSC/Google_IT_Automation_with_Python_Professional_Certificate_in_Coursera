- Getting Started with Monitoring:

Once we have our service running in the Cloud, we want to make sure that our service keeps running, and not just that, we want to make sure it keeps behaving as expected, returning the right results quickly and reliably. 

The key to ensuring all of this, is to set up good monitoring and alerting rules. 

In the next few modules, we'll do a rundown of monitoring and alerting concepts and techniques, followed by a practical demonstration. 

To understand how our service is performing, we need to monitor it. 

- Monitoring:
Lets us look into the history and current status of a system. 

- How can we know what the status is? 
We'll check out a bunch of different metrics. These metrics tell us if the service is behaving as expected or not. 

Some metrics are generic, like how much memory an instance is using. 
Other metrics are specific to the service we want to monitor. 
Say your company is running a website and you want to check if it's working correctly. When a web server responds to an HTTP request, it starts by sending a response code, followed by the content of the response. 
You might know, for example, that a "404" code means that "the page wasn't found", or that a "500" response means that there was an "internal server error". 
In general, response codes in the: 
· 500 range: Server-side errors.
· 400 range: Client-side problems.

When monitoring your web service, you want to check both:
· The count of response codes 
· Their types to know if everything's okay. 

If you're running an e-commerce site, you'll care about how many purchases were made successfully and how many failed to complete. 
If you're running a mail server, you want to know how many emails were sent and how many got stuck and so on. 

You'll need to think about the service you want to monitor and figure out the metrics you'll need. 

Now, once we've decided what metrics we care about, 

- What do we do with them? 
We will typically store them in the monitoring system. 

There's a bunch of different monitoring systems out there: 
· AWS Cloudwatch, 
· Google Stack Driver,
· Azure Metrics 
These are offered directly by the Cloud providers. 

Other systems like: 
· Prometheus, 
· Datadog, 
· Nagios 
These can be used across vendors. 

There's two ways of getting our metrics into the monitoring system. Some systems use a "pull model" other monitoring systems use a "push model".

- Pull model:
  The monitoring infrastructure will querie our service to get the metrics. 

- Push model:
  Our service needs to periodically connect to the system to send the metrics. 

No matter how we get the metrics into the system, we can create "dashboards" based on the collected data. This dashboard show the progression of the metrics over time. 
We can look at the history of one specific metric to compare the current state to how it was last week or last month. Or we can look at the progression of two or more metrics together to check out how the change in one metrics effects another. 

Imagine it's Monday morning and you notice that your service is receiving a lot less traffic than usual. You can look at the data from past weeks and see if you always get less traffic on Monday mornings or if there's something broken causing your service to be unresponsive. 
Or if you see that in the past couple days, the memory used by your instances has been going up, you can check if this growth follows a similar increase in another metric, like the amount of requests received or the amount of data being transmitted. This can help you decide if there's been a memory leak that needs to be fixed or if it's just an expected consequences of a growth in popularity. 

- Pro tip: 
You only want to store the metrics that you care about, since storing all of these metrics in the system takes space, and storage space costs money. 

When we collect metrics from inside a system, like: 
· How much storage space the service is currently using,
· How long it takes to process a request, 
this is called "whitebox monitoring". 

- Whitebox monitoring:
  Checks the behavior of the system from the inside. 

We know the information we want to track, and we're in charge of making it possible to track. For example, if we want to track how many queries we're making to the database, we might need to add a variable to count this. 

- Blackbox monitoring:
  Checks the behavior of the system from the outside. 
  
This is typically done by making a request to the service and then checking that the actual response matches the expected response. 

We can use this to do a very simple check to know if the service is up and to verify if the service is responding from outside your network. Or we could use it to see how long it takes for a client in a different part of the world to get a response from the system. 

Okay, monitoring is really cool, but who wants to stare at dashboards all day trying to figure out if something's wrong? Fortunately, we don't have to. Instead, we can set up "alerting rules" to let us know if something's wrong.

 This is a critical part of ensuring a reliable system, and we're going to learn how to do it in the next module.