- Managing Projects:

If you are a project maintainer, it is important that you reply promptly to
pull requests and do not let them stagnate.

The more time that passes since the pull request was made, the more probable
that there was a new commit that might cause conflicts with it when you will
try to merge.

You need to make sure that you always understand all the pull requests before
accepting them, in case that the person is no longer there to maintain it and 
you have to do it.

When it comes to coordinating who does what and when, a common strategy for
active software projects is to use an issue tracker.


- Tracking Issues and/or bugs:

There is a popular bug tracker called "Bugzilla" which is used by quite a few open source projects. On the flip side, GitHub has one baked in. So, if you are
hosting your project there, it can be very handy to track work on your project.

When fixing some issues opened, once we fix them we could write on the commit 
"closes #1" where the number 1 should be the issue id and GitHub will close it
automatically for us and will reference this commit with a link as comment.


- Continuous integration

A contiuous integration system (CI) will build and test our code every time
there is a change.
This means that the test will run every time that there is a new commit to our
branch and also with any new pull request accepted.

Once we have our code automatically built and tested, the next automation step
is continuous deployment, which is sometimes called continuous delivery (CD).

Continuous Integration / Continuous Delivery (CI/CD)

One popular option for CI/CD is "Jenkins" which can be used to automate lots of
different types of projects.
Some repository hostings like GitLab provide their own infrastructure for doing 
CI. GitHub also provides a CI/CD system and it is called "Actions".
Another popular alternative is to use "Travis" which communicates with GitHub
and can access the information from GitHub projects to know which integrations
to run.

- Pipelines:
    Specify the steps that need to run to get the result you want.

- Artifacts:
    The name used to describe any files that are generated as part of the
    pipeline.
    This tipically includes the compiled versions of he code but can includes
    other generated files like PDFs for the documentation or OS specific
    packages for easy installation.
    On top of this you might want to keep the logs of the pipelines build and 
    test stages to review them if things fail.

When setting up a CI/CD, we have to be careful about how we manage secrets.
There are two things to remember:
1.- Make sure the authorized entities for the test servers are not the same
    entities authorized to deploy on the production servers.
    That way, if there is any kind of compromise in the pipeline, our production
    servers will not be affected.
2.- Always have a plan to recover your access in case the pipeline gets
    compromised.


- Additional tools:

Check out the following links for more information:

https://arp242.net/diy.html

https://help.github.com/en/articles/closing-issues-using-keywords

https://help.github.com/en/articles/setting-guidelines-for-repository-contributors

https://www.infoworld.com/article/3271126/what-is-cicd-continuous-integration-and-continuous-delivery-explained.html

https://stackify.com/what-is-cicd-whats-important-and-how-to-get-it-right/

https://docs.travis-ci.com/user/tutorial/

https://docs.travis-ci.com/user/build-stages/
